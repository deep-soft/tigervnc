# 2023-10-24 00:00
#
name: act-test-vars

# on: [push, pull_request]
on:
  workflow_dispatch:
env:
  TAG_NAME:      "TigerVNC"
  TAG_VERSION:   "v1.0.0"
  TAG_BUILD:     "-b"
  TAG_REF:       "0000000"
  PROG_NAME:     "TigerVNC"
  PROG_VERSION:  "v1.0.0"
  VERSION:       "1.0.0"
  DRAFT:         false
  DEBUG_LS:      "yes"

jobs:
  program-version:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      TAG_NAME:      ${{ steps.set_vars.TAG_NAME     }}
      TAG_VERSION:   ${{ steps.set_vars.TAG_VERSION  }}
      TAG_BUILD:     ${{ steps.set_vars.TAG_BUILD    }}
      TAG_REF:       ${{ steps.set_vars.TAG_REF      }}
      PROG_NAME:     ${{ steps.set_vars.PROG_NAME    }}
      PROG_VERSION:  ${{ steps.set_vars.PROG_VERSION }}
      VERSION:       ${{ steps.set_vars.VERSION      }}
      
    steps:
      - name: Checkout
        uses: deep-soft/checkout@v4

# - get program version begin
      - name: get program version
        shell: bash
        run: |
          _prog_version_=$(grep "set(VERSION " CMakeLists.txt  | awk '{print $2}' | awk -F")" '{print $1}')
          echo "VERSION=$_prog_version_" >> $GITHUB_ENV
          echo "PROG_VERSION=v$_prog_version_" >> $GITHUB_ENV
          echo "TAG_VERSION=v$_prog_version_" >> $GITHUB_ENV

      - name: print program version
        shell: bash
        run: |
          echo "VERSION=${{ env.VERSION }}"
          echo "PROG_VERSION=${{ env.PROG_VERSION }}"
          echo "TAG_VERSION=${{ env.TAG_VERSION }}"
# - get program version begin

# - get ref set build begin
      - name: Get ref, set build version
        shell: bash
        run: |
          _ref_all_=$(git log -1 --format='%H')
          # _ref_=$(echo ${_ref_all_::7})
          _ref_org_=${{ env.TAG_REF }}
          _ref_len_="${#_ref_org_}"
          _ref_=$(echo ${_ref_all_::$_ref_len_})
          echo "TAG_REF=$_ref_" >> $GITHUB_ENV
          _build_=${{ env.TAG_BUILD }}.$_ref_
          echo "TAG_BUILD=$_build_" >> $GITHUB_ENV
          echo "WORK_DIR=$(pwd)" >> $GITHUB_ENV
          _tag_name_=${{ env.TAG_NAME }}
          echo "TAG_NAME=$_tag_name_-${{ env.TAG_VERSION }}" >> $GITHUB_ENV

      - name: Print ref, build version
        shell: bash
        run: |
          echo "REF: ${{ env.TAG_REF }}"
          echo "BLD: ${{ env.TAG_BUILD }}"
          echo "NAM: ${{ env.TAG_NAME }}"
          echo "${{ env.TAG_NAME }}-${{ env.TAG_BUILD }}" > _tag_name_.txt
# - get ref set build end

      - id: set_vars
        name: set vars
        shell: bash
        run: |
          echo "    TAG_NAME=${{ env.TAG_NAME     }}" >> "$GITHUB_OUTPUT"
          echo " TAG_VERSION=${{ env.TAG_VERSION  }}" >> "$GITHUB_OUTPUT"
          echo "   TAG_BUILD=${{ env.TAG_BUILD    }}" >> "$GITHUB_OUTPUT"
          echo "     TAG_REF=${{ env.TAG_REF      }}" >> "$GITHUB_OUTPUT"
          echo "   PROG_NAME=${{ env.PROG_NAME    }}" >> "$GITHUB_OUTPUT"
          echo "PROG_VERSION=${{ env.PROG_VERSION }}" >> "$GITHUB_OUTPUT"
          echo "     VERSION=${{ env.VERSION      }}" >> "$GITHUB_OUTPUT"
          
      - id: print_vars
        name: print vars
        shell: bash
        run: |
          echo "    TAG_NAME=${{ needs.program-version.outputs.TAG_NAME     }}"
          echo " TAG_VERSION=${{ needs.program-version.outputs.TAG_VERSION  }}"
          echo "   TAG_BUILD=${{ needs.program-version.outputs.TAG_BUILD    }}"
          echo "     TAG_REF=${{ needs.program-version.outputs.TAG_REF      }}"
          echo "   PROG_NAME=${{ needs.program-version.outputs.PROG_NAME    }}"
          echo "PROG_VERSION=${{ needs.program-version.outputs.PROG_VERSION }}"
          echo "     VERSION=${{ needs.program-version.outputs.VERSION      }}"

  build-linux:
    runs-on: ubuntu-latest
    needs: [program-version]
    timeout-minutes: 10
    steps:
      - env:
          TAG_NAME:     ${{ needs.program-version.outputs.TAG_NAME     }}
          TAG_VERSION:  ${{ needs.program-version.outputs.TAG_VERSION  }}
          TAG_BUILD:    ${{ needs.program-version.outputs.TAG_BUILD    }}
          TAG_REF:      ${{ needs.program-version.outputs.TAG_REF      }}
          PROG_NAME:    ${{ needs.program-version.outputs.PROG_NAME    }}
          PROG_VERSION: ${{ needs.program-version.outputs.PROG_VERSION }}
          VERSION:      ${{ needs.program-version.outputs.VERSION      }}
        run: |
          echo "    TAG_NAME=$TAG_NAME     "
          echo " TAG_VERSION=$TAG_VERSION  "
          echo "   TAG_BUILD=$TAG_BUILD    "
          echo "     TAG_REF=$TAG_REF      "
          echo "   PROG_NAME=$PROG_NAME    "
          echo "PROG_VERSION=$PROG_VERSION "
          echo "     VERSION=$VERSION      "

      - name: Checkout
        uses: deep-soft/checkout@v4

      - name: restore ENV from program-version
        shell: bash
        run: |
          echo "restored?"
          echo "    TAG_NAME=${{ needs.program-version.outputs.TAG_NAME     }}" >> $GITHUB_ENV
          echo " TAG_VERSION=${{ needs.program-version.outputs.TAG_VERSION  }}" >> $GITHUB_ENV
          echo "   TAG_BUILD=${{ needs.program-version.outputs.TAG_BUILD    }}" >> $GITHUB_ENV
          echo "     TAG_REF=${{ needs.program-version.outputs.TAG_REF      }}" >> $GITHUB_ENV
          echo "   PROG_NAME=${{ needs.program-version.outputs.PROG_NAME    }}" >> $GITHUB_ENV
          echo "PROG_VERSION=${{ needs.program-version.outputs.PROG_VERSION }}" >> $GITHUB_ENV
          echo "     VERSION=${{ needs.program-version.outputs.VERSION      }}" >> $GITHUB_ENV

      - name: print ENV restored from program-version
        shell: bash
        run: |
          echo "    TAG_NAME=${{ env.TAG_NAME     }}"
          echo " TAG_VERSION=${{ env.TAG_VERSION  }}"
          echo "   TAG_BUILD=${{ env.TAG_BUILD    }}"
          echo "     TAG_REF=${{ env.TAG_REF      }}"
          echo "   PROG_NAME=${{ env.PROG_NAME    }}"
          echo "PROG_VERSION=${{ env.PROG_VERSION }}"
          echo "     VERSION=${{ env.VERSION      }}"

  build-windows:
    needs: [program-version]
    runs-on: windows-latest
    timeout-minutes: 20
    steps:
      - env:
          TAG_NAME:     ${{ needs.program-version.outputs.TAG_NAME     }}
          TAG_VERSION:  ${{ needs.program-version.outputs.TAG_VERSION  }}
          TAG_BUILD:    ${{ needs.program-version.outputs.TAG_BUILD    }}
          TAG_REF:      ${{ needs.program-version.outputs.TAG_REF      }}
          PROG_NAME:    ${{ needs.program-version.outputs.PROG_NAME    }}
          PROG_VERSION: ${{ needs.program-version.outputs.PROG_VERSION }}
          VERSION:      ${{ needs.program-version.outputs.VERSION      }}
        run: |
          echo "    TAG_NAME=$TAG_NAME     "
          echo " TAG_VERSION=$TAG_VERSION  "
          echo "   TAG_BUILD=$TAG_BUILD    "
          echo "     TAG_REF=$TAG_REF      "
          echo "   PROG_NAME=$PROG_NAME    "
          echo "PROG_VERSION=$PROG_VERSION "
          echo "     VERSION=$VERSION      "

      - name: Checkout
        uses: deep-soft/checkout@v4

      - name: restore ENV from program-version
        shell: bash
        run: |
          echo "restored?"
          echo "    TAG_NAME=${{ needs.program-version.outputs.TAG_NAME     }}" >> $GITHUB_ENV
          echo " TAG_VERSION=${{ needs.program-version.outputs.TAG_VERSION  }}" >> $GITHUB_ENV
          echo "   TAG_BUILD=${{ needs.program-version.outputs.TAG_BUILD    }}" >> $GITHUB_ENV
          echo "     TAG_REF=${{ needs.program-version.outputs.TAG_REF      }}" >> $GITHUB_ENV
          echo "   PROG_NAME=${{ needs.program-version.outputs.PROG_NAME    }}" >> $GITHUB_ENV
          echo "PROG_VERSION=${{ needs.program-version.outputs.PROG_VERSION }}" >> $GITHUB_ENV
          echo "     VERSION=${{ needs.program-version.outputs.VERSION      }}" >> $GITHUB_ENV

      - name: print ENV restored from program-version
        shell: bash
        run: |
          echo "    TAG_NAME=${{ env.TAG_NAME     }}"
          echo " TAG_VERSION=${{ env.TAG_VERSION  }}"
          echo "   TAG_BUILD=${{ env.TAG_BUILD    }}"
          echo "     TAG_REF=${{ env.TAG_REF      }}"
          echo "   PROG_NAME=${{ env.PROG_NAME    }}"
          echo "PROG_VERSION=${{ env.PROG_VERSION }}"
          echo "     VERSION=${{ env.VERSION      }}"

  build-macos:
    needs: [program-version]
    runs-on: macos-latest
    timeout-minutes: 20
    steps:
      - env:
          TAG_NAME:     ${{ needs.program-version.outputs.TAG_NAME     }}
          TAG_VERSION:  ${{ needs.program-version.outputs.TAG_VERSION  }}
          TAG_BUILD:    ${{ needs.program-version.outputs.TAG_BUILD    }}
          TAG_REF:      ${{ needs.program-version.outputs.TAG_REF      }}
          PROG_NAME:    ${{ needs.program-version.outputs.PROG_NAME    }}
          PROG_VERSION: ${{ needs.program-version.outputs.PROG_VERSION }}
          VERSION:      ${{ needs.program-version.outputs.VERSION      }}
        run: |
          echo "    TAG_NAME=$TAG_NAME     "
          echo " TAG_VERSION=$TAG_VERSION  "
          echo "   TAG_BUILD=$TAG_BUILD    "
          echo "     TAG_REF=$TAG_REF      "
          echo "   PROG_NAME=$PROG_NAME    "
          echo "PROG_VERSION=$PROG_VERSION "
          echo "     VERSION=$VERSION      "

      - name: Checkout
        uses: deep-soft/checkout@v4

      - name: restore ENV from program-version
        shell: bash
        run: |
          echo "restored?"
          echo "    TAG_NAME=${{ needs.program-version.outputs.TAG_NAME     }}" >> $GITHUB_ENV
          echo " TAG_VERSION=${{ needs.program-version.outputs.TAG_VERSION  }}" >> $GITHUB_ENV
          echo "   TAG_BUILD=${{ needs.program-version.outputs.TAG_BUILD    }}" >> $GITHUB_ENV
          echo "     TAG_REF=${{ needs.program-version.outputs.TAG_REF      }}" >> $GITHUB_ENV
          echo "   PROG_NAME=${{ needs.program-version.outputs.PROG_NAME    }}" >> $GITHUB_ENV
          echo "PROG_VERSION=${{ needs.program-version.outputs.PROG_VERSION }}" >> $GITHUB_ENV
          echo "     VERSION=${{ needs.program-version.outputs.VERSION      }}" >> $GITHUB_ENV

      - name: print ENV restored from program-version
        shell: bash
        run: |
          echo "    TAG_NAME=${{ env.TAG_NAME     }}"
          echo " TAG_VERSION=${{ env.TAG_VERSION  }}"
          echo "   TAG_BUILD=${{ env.TAG_BUILD    }}"
          echo "     TAG_REF=${{ env.TAG_REF      }}"
          echo "   PROG_NAME=${{ env.PROG_NAME    }}"
          echo "PROG_VERSION=${{ env.PROG_VERSION }}"
          echo "     VERSION=${{ env.VERSION      }}"

  build-java:
    needs: [program-version]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - env:
          TAG_NAME:     ${{ needs.program-version.outputs.TAG_NAME     }}
          TAG_VERSION:  ${{ needs.program-version.outputs.TAG_VERSION  }}
          TAG_BUILD:    ${{ needs.program-version.outputs.TAG_BUILD    }}
          TAG_REF:      ${{ needs.program-version.outputs.TAG_REF      }}
          PROG_NAME:    ${{ needs.program-version.outputs.PROG_NAME    }}
          PROG_VERSION: ${{ needs.program-version.outputs.PROG_VERSION }}
          VERSION:      ${{ needs.program-version.outputs.VERSION      }}
        run: |
          echo "    TAG_NAME=$TAG_NAME     "
          echo " TAG_VERSION=$TAG_VERSION  "
          echo "   TAG_BUILD=$TAG_BUILD    "
          echo "     TAG_REF=$TAG_REF      "
          echo "   PROG_NAME=$PROG_NAME    "
          echo "PROG_VERSION=$PROG_VERSION "
          echo "     VERSION=$VERSION      "

      - name: Checkout
        uses: deep-soft/checkout@v4

      - name: restore ENV from program-version
        shell: bash
        run: |
          echo "restored?"
          echo "    TAG_NAME=${{ needs.program-version.outputs.TAG_NAME     }}" >> $GITHUB_ENV
          echo " TAG_VERSION=${{ needs.program-version.outputs.TAG_VERSION  }}" >> $GITHUB_ENV
          echo "   TAG_BUILD=${{ needs.program-version.outputs.TAG_BUILD    }}" >> $GITHUB_ENV
          echo "     TAG_REF=${{ needs.program-version.outputs.TAG_REF      }}" >> $GITHUB_ENV
          echo "   PROG_NAME=${{ needs.program-version.outputs.PROG_NAME    }}" >> $GITHUB_ENV
          echo "PROG_VERSION=${{ needs.program-version.outputs.PROG_VERSION }}" >> $GITHUB_ENV
          echo "     VERSION=${{ needs.program-version.outputs.VERSION      }}" >> $GITHUB_ENV

      - name: print ENV restored from program-version
        shell: bash
        run: |
          echo "    TAG_NAME=${{ env.TAG_NAME     }}"
          echo " TAG_VERSION=${{ env.TAG_VERSION  }}"
          echo "   TAG_BUILD=${{ env.TAG_BUILD    }}"
          echo "     TAG_REF=${{ env.TAG_REF      }}"
          echo "   PROG_NAME=${{ env.PROG_NAME    }}"
          echo "PROG_VERSION=${{ env.PROG_VERSION }}"
          echo "     VERSION=${{ env.VERSION      }}"

  build-packages:
    needs: [program-version]
    timeout-minutes: 20
    strategy:
      matrix:
        target:
          - centos7
          - rocky8
          - rocky9
          - bionic
          - focal
          - jammy
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - env:
          TAG_NAME:     ${{ needs.program-version.outputs.TAG_NAME     }}
          TAG_VERSION:  ${{ needs.program-version.outputs.TAG_VERSION  }}
          TAG_BUILD:    ${{ needs.program-version.outputs.TAG_BUILD    }}
          TAG_REF:      ${{ needs.program-version.outputs.TAG_REF      }}
          PROG_NAME:    ${{ needs.program-version.outputs.PROG_NAME    }}
          PROG_VERSION: ${{ needs.program-version.outputs.PROG_VERSION }}
          VERSION:      ${{ needs.program-version.outputs.VERSION      }}
        run: |
          echo "    TAG_NAME=$TAG_NAME     "
          echo " TAG_VERSION=$TAG_VERSION  "
          echo "   TAG_BUILD=$TAG_BUILD    "
          echo "     TAG_REF=$TAG_REF      "
          echo "   PROG_NAME=$PROG_NAME    "
          echo "PROG_VERSION=$PROG_VERSION "
          echo "     VERSION=$VERSION      "

      - name: Checkout
        uses: deep-soft/checkout@v4

      - name: restore ENV from program-version
        shell: bash
        run: |
          echo "restored?"
          echo "    TAG_NAME=${{ needs.program-version.outputs.TAG_NAME     }}" >> $GITHUB_ENV
          echo " TAG_VERSION=${{ needs.program-version.outputs.TAG_VERSION  }}" >> $GITHUB_ENV
          echo "   TAG_BUILD=${{ needs.program-version.outputs.TAG_BUILD    }}" >> $GITHUB_ENV
          echo "     TAG_REF=${{ needs.program-version.outputs.TAG_REF      }}" >> $GITHUB_ENV
          echo "   PROG_NAME=${{ needs.program-version.outputs.PROG_NAME    }}" >> $GITHUB_ENV
          echo "PROG_VERSION=${{ needs.program-version.outputs.PROG_VERSION }}" >> $GITHUB_ENV
          echo "     VERSION=${{ needs.program-version.outputs.VERSION      }}" >> $GITHUB_ENV

      - name: print ENV restored from program-version
        shell: bash
        run: |
          echo "    TAG_NAME=${{ env.TAG_NAME     }}"
          echo " TAG_VERSION=${{ env.TAG_VERSION  }}"
          echo "   TAG_BUILD=${{ env.TAG_BUILD    }}"
          echo "     TAG_REF=${{ env.TAG_REF      }}"
          echo "   PROG_NAME=${{ env.PROG_NAME    }}"
          echo "PROG_VERSION=${{ env.PROG_VERSION }}"
          echo "     VERSION=${{ env.VERSION      }}"
